<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>해피해킹 메모장</title><link>https://notes.hphk.io/</link><description>Recent content on 해피해킹 메모장</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Thu, 21 Jan 2021 15:10:00 +0900</lastBuildDate><atom:link href="https://notes.hphk.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Bash with Windows Terminal</title><link>https://notes.hphk.io/p/git-bash-with-windows-terminal/</link><pubDate>Thu, 21 Jan 2021 15:10:00 +0900</pubDate><guid>https://notes.hphk.io/p/git-bash-with-windows-terminal/</guid><description>&lt;img src="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/windows-terminal.jpeg" alt="Featured image of post Git Bash with Windows Terminal" />&lt;blockquote>
&lt;p>Git Bash가 설치되어 있어야 합니다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-windows-terminal-설치">1. Windows Terminal 설치&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.microsoft.com/store/productId/9N0DX20HK701" target="_blank" rel="noopener"
>Microsoft Store&lt;/a>에서 &lt;strong>Windows Terminal&lt;/strong>을 설치합니다.&lt;/p>
&lt;p>&lt;figure style="flex-grow: 128; flex-basis: 308px">
&lt;a href="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/1.png" data-size="1801x1399">&lt;img src="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/1.png"
srcset="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/1_hu3bd1d8e7047066115ca79f4600024118_669761_480x0_resize_box_2.png 480w, https://notes.hphk.io/p/git-bash-with-windows-terminal/images/1_hu3bd1d8e7047066115ca79f4600024118_669761_1024x0_resize_box_2.png 1024w"
width="1801"
height="1399"
loading="lazy"
alt="Microsoft Store - Windows Terminal">
&lt;/a>
&lt;figcaption>Microsoft Store - Windows Terminal&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="2-windows-terminal-실행">2. Windows Terminal 실행&lt;/h2>
&lt;p>처음 실행하면 기본으로 PowerShell, CMD, Azure Cloud Shell을 사용할 수 있도록 되어 있습니다.&lt;/p>
&lt;p>&lt;figure style="flex-grow: 182; flex-basis: 438px">
&lt;a href="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/2.png" data-size="1733x949">&lt;img src="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/2.png"
srcset="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/2_hu8724711059a78e37e71bcc9c96d7d8ec_69488_480x0_resize_box_2.png 480w, https://notes.hphk.io/p/git-bash-with-windows-terminal/images/2_hu8724711059a78e37e71bcc9c96d7d8ec_69488_1024x0_resize_box_2.png 1024w"
width="1733"
height="949"
loading="lazy"
alt="Windows Terminal shell list">
&lt;/a>
&lt;figcaption>Windows Terminal shell list&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>설정을 통해 추가적인 Shell(Bash)을 사용할 수 있도록 해봅시다.&lt;/p>
&lt;h2 id="3-windows-terminal-설정">3. Windows Terminal 설정&lt;/h2>
&lt;p>&lt;code>설정&lt;/code> 메뉴를 클릭하거나 &lt;code>ctrl + ,&lt;/code> 단축키를 사용하여, 설정 파일을 열 수 있습니다.&lt;/p>
&lt;p>&lt;figure style="flex-grow: 142; flex-basis: 342px">
&lt;a href="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/3.png" data-size="1658x1162">&lt;img src="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/3.png"
srcset="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/3_hu3209302c948d7dec3a6783e4ef7faf78_137886_480x0_resize_box_2.png 480w, https://notes.hphk.io/p/git-bash-with-windows-terminal/images/3_hu3209302c948d7dec3a6783e4ef7faf78_137886_1024x0_resize_box_2.png 1024w"
width="1658"
height="1162"
loading="lazy"
alt="settings.json">
&lt;/a>
&lt;figcaption>settings.json&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>메모장으로 열리기 때문에 편집이 불편할 수 있습니다. 다른 에디터를 사용하실 분들은 &lt;code>다른 이름으로 저장&lt;/code> 메뉴 또는 &lt;code>ctrl + shift + s&lt;/code> 단축키를 사용하여 &amp;lsquo;다른 이름으로 저장&amp;rsquo; 창을 열고, 해당 위치를 원하는 에디터로 열어 설정 파일을 편집합니다. 여기서는 VS Code를 사용하겠습니다. &lt;code>Code로 열기&lt;/code> 컨텍스트 메뉴를 통해 VS Code에서 설정 파일이 존재하는 폴더를 열어 줍니다.&lt;/p>
&lt;p>&lt;figure style="flex-grow: 132; flex-basis: 317px">
&lt;a href="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/4.png" data-size="1179x890">&lt;img src="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/4.png"
srcset="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/4_hu6d86b20414f1327987f063b4a1a0cef8_85863_480x0_resize_box_2.png 480w, https://notes.hphk.io/p/git-bash-with-windows-terminal/images/4_hu6d86b20414f1327987f063b4a1a0cef8_85863_1024x0_resize_box_2.png 1024w"
width="1179"
height="890"
loading="lazy"
alt="Open with VS Code">
&lt;/a>
&lt;figcaption>Open with VS Code&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;code>profiles&lt;/code> 항목에 &lt;code>Git Bash&lt;/code> 프로필을 추가합니다.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;profiles&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;defaults&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;list&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;guid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Windows PowerShell&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;commandline&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;powershell.exe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;hidden&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;guid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;{0caa0dad-35be-5f56-a8ff-afceeeaa6101}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;명령 프롬프트&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;commandline&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;cmd.exe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;hidden&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;guid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;{b453ae62-4e3d-5e58-b989-0a998ec441b8}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;hidden&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Azure Cloud Shell&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;source&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Windows.Terminal.Azure&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;guid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;{124fc1da-dadc-4276-9c4e-f0524ba57a49}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Git Bash&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;commandline&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;\&amp;#34;%PROGRAMFILES%\\git\\usr\\bin\\bash.exe\&amp;#34; -i -l&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;icon&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;%PROGRAMFILES%\\git\\mingw64\\share\\git\\git-for-windows.ico&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;startingDirectory&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;%USERPROFILE%&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;cursorShape&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;filledBox&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;hidden&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 때 프로필의 &lt;code>guid&lt;/code>는 해당 프로필의 고유 아이디이며, 저 포멧을 사용하고 다른 값과 중복되지만 않으면 어떠한 값도 사용 가능합니다. 위의 guid를 그대로 사용해도 되지만, 새롭게 생성하고 싶으신 분들은 PowerShell에서 아래의 명령어를 입력하여 새롭게 생성할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="no">[guid]&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">NewGuid&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure style="flex-grow: 182; flex-basis: 437px">
&lt;a href="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/5.png" data-size="1732x950">&lt;img src="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/5.png"
srcset="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/5_hu6d763b16c7e2c8d4db4e6dc2e2ca5cfe_66883_480x0_resize_box_2.png 480w, https://notes.hphk.io/p/git-bash-with-windows-terminal/images/5_hu6d763b16c7e2c8d4db4e6dc2e2ca5cfe_66883_1024x0_resize_box_2.png 1024w"
width="1732"
height="950"
loading="lazy"
alt="Generate new guid">
&lt;/a>
&lt;figcaption>Generate new guid&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>다양한 프로필 설정법은 &lt;a class="link" href="https://aka.ms/terminal-profile-settings" target="_blank" rel="noopener"
>https://aka.ms/terminal-profile-settings&lt;/a> 에서 확인 가능합니다.&lt;/p>
&lt;p>저장을 하고 나면 아래와 같이 &lt;code>Git Bash&lt;/code>가 추가된 것을 확인할 수 있습니다.&lt;/p>
&lt;p>&lt;figure style="flex-grow: 182; flex-basis: 437px">
&lt;a href="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/6.png" data-size="1732x950">&lt;img src="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/6.png"
srcset="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/6_hu73d486f91eb7b06f97310bc7f24a5b0b_72158_480x0_resize_box_2.png 480w, https://notes.hphk.io/p/git-bash-with-windows-terminal/images/6_hu73d486f91eb7b06f97310bc7f24a5b0b_72158_1024x0_resize_box_2.png 1024w"
width="1732"
height="950"
loading="lazy"
alt="Git Bash on shell list">
&lt;/a>
&lt;figcaption>Git Bash on shell list&lt;/figcaption>
&lt;/figure> &lt;figure style="flex-grow: 182; flex-basis: 438px">
&lt;a href="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/7.png" data-size="1733x949">&lt;img src="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/7.png"
srcset="https://notes.hphk.io/p/git-bash-with-windows-terminal/images/7_hubba4f0514edabe2f89604561ab55228b_44810_480x0_resize_box_2.png 480w, https://notes.hphk.io/p/git-bash-with-windows-terminal/images/7_hubba4f0514edabe2f89604561ab55228b_44810_1024x0_resize_box_2.png 1024w"
width="1733"
height="949"
loading="lazy"
alt="Git Bash with Windows Terminal">
&lt;/a>
&lt;figcaption>Git Bash with Windows Terminal&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="4-기본-프로필-설정">4. 기본 프로필 설정&lt;/h2>
&lt;p>새 탭을 열었을 때 기본으로 나오는 프로필을 변경하려면, 기본으로 설정하고자 하는 프로필의 &lt;code>guid&lt;/code>를 &lt;code>defaultProfile&lt;/code> 키의 값으로 지정하면 됩니다.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;defaultProfile&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;[guid]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;defaultProfile&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;{124fc1da-dadc-4276-9c4e-f0524ba57a49}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Arrow Function vs Regular Function</title><link>https://notes.hphk.io/p/arrow-function-vs-regular-function/</link><pubDate>Wed, 20 Jan 2021 16:57:00 +0900</pubDate><guid>https://notes.hphk.io/p/arrow-function-vs-regular-function/</guid><description>&lt;img src="https://notes.hphk.io/p/arrow-function-vs-regular-function/images/carbon.png" alt="Featured image of post Arrow Function vs Regular Function" />&lt;p>&lt;strong>Arrow function이와 function 키워드의 가장 큰 차이점은 &lt;code>this&lt;/code> 의 차이이다.&lt;/strong>&lt;/p>
&lt;h2 id="1-왜-이벤트-리스너에서-일반적으로-arrow-function을-사용하면-안될까">1. 왜 이벤트 리스너에서 일반적으로 arrow function을 사용하면 안될까?&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;function&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>function&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;arrow&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>arrow function&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://unpkg.com/axios/dist/axios.min.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">functionButton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#function&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">arrowButton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#arrow&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">functionButton&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;=====function=====&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="nx">arrowButton&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">event&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;=====arrow fuction=====&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>각각의 버튼을 눌러서 확인을 해보자.&lt;/p>
&lt;pre>&lt;code>=====function=====
&amp;lt;button id=&amp;quot;function&amp;quot;&amp;gt;function&amp;lt;/button&amp;gt;
=====arrow fuction=====
Window
&lt;/code>&lt;/pre>&lt;h2 id="2-this">2. this&lt;/h2>
&lt;p>자바스크립트의 this는 일반적인 프로그래밍 언어에서의 this와 조금 다르게 동작한다.&lt;/p>
&lt;p>java this와 python self의 인스턴스의 호출한 대상의 현재 객체를 뜻하는 것(참조)이었다.&lt;/p>
&lt;p>&lt;strong>자바스크립트의 function 키워드 함수에서는 함수가 어떻게 호출 되었는지에 따라 다르게 동작한다.
(동적으로 결정)&lt;/strong>&lt;/p>
&lt;p>브라우저 콘솔에 &lt;code>this&lt;/code>를 입력 해보자.&lt;/p>
&lt;p>&lt;figure style="flex-grow: 1425; flex-basis: 3420px">
&lt;a href="https://notes.hphk.io/p/arrow-function-vs-regular-function/images/01.png" data-size="1710x120">&lt;img src="https://notes.hphk.io/p/arrow-function-vs-regular-function/images/01.png"
srcset="https://notes.hphk.io/p/arrow-function-vs-regular-function/images/01_hu1aa884d2689ba88174841eb5c536b922_30395_480x0_resize_box_2.png 480w, https://notes.hphk.io/p/arrow-function-vs-regular-function/images/01_hu1aa884d2689ba88174841eb5c536b922_30395_1024x0_resize_box_2.png 1024w"
width="1710"
height="120"
loading="lazy"
alt="브라우저 콘솔과 this">
&lt;/a>
&lt;figcaption>브라우저 콘솔과 this&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="2-1-window--함수-호출-함수-내-함수">2-1. window : 함수 호출, 함수 내 함수&lt;/h3>
&lt;p>window는 브라우저에서의 최상위 객체를 의미한다. (전역 객체)&lt;/p>
&lt;p>기본적인 함수 선언을 하고 호출한다면, 이 경우에는 전역에서 호출 하였으므로 전역 객체가 바인딩된다.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">greeting&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// window
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>함수 내 함수는 추후에 다루겠다.&lt;/p>
&lt;h3 id="2-2-객체--메소드-호출">2-2. 객체 : 메소드 호출&lt;/h3>
&lt;p>메소드로 선언하고 호출한다면, 오브젝트의 메소드이므로 오브젝트가 바인딩된다.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">you&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;neo&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">greeting&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">you&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">greeting&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// {name: &amp;#39;neo&amp;#39;, greeting: f} : this는 해당 오브젝트(객체)
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-3-arrow-function">2-3. Arrow Function&lt;/h3>
&lt;p>arrow function에서의 this는 어떻게 동작할까?&lt;/p>
&lt;p>&lt;strong>arrow function에서는 호출과 위치와 상관없이 상위 스코프 this를 가리킨다. (Lexical this)&lt;/strong>&lt;/p>
&lt;p>따라서, 메소드 선언을 arrow 함수로 하게 된다면, 해당 오브젝트의 상위 스코프인 전역 객체인 window가 바인딩된다.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">arrowGreeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">me&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;me&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">arrowGreeting&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">arrowGreeting&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// window
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">me&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arrowGreeting&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// window
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>메소드 선언은 function 키워드를 활용하자!&lt;/strong>&lt;/p>
&lt;h3 id="그러면-es6에서-언제-arrow-function을-활용하면-편할까">그러면 ES6에서 언제 arrow function을 활용하면 편할까?&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">numbers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nx">print&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// {numbers: Array(1), print: ƒ}
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">numbers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// [1]
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// window
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">num&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>내부 함수에서는 어디든 상관 없이 항상 전역객체를 바인딩한다.&lt;/strong>&lt;/li>
&lt;li>뒤에 이야기 한다고 했던 함수 내의 함수 상황의 예시가 위와 같다. 이때 arrow function을 쓰면 좋다!&lt;/li>
&lt;li>print 메소드의 내에 있는 콜백함수(forEach)에서의 상위 스코프는 num2 오브젝트이다.&lt;/li>
&lt;li>따라서, this가 아래와 같이 해당 오브젝트가 바인딩 된다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">num2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">numbers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nx">print&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// {numbers: Array(1), print: ƒ}
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">numbers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// [1]
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// {numbers: Array(1), print: ƒ}
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">num2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="다시-이벤트-리스너로-돌아와서">&lt;strong>다시 이벤트 리스너로 돌아와서,&lt;/strong>&lt;/h3>
&lt;p>&lt;code>addEventListener&lt;/code> 에서의 콜백 함수는 특별하게 function키워드의 경우에는 이벤트 리스너를 호출한 대상을 (&lt;code>event.target&lt;/code>) 뜻한다. 따라서, 호출한 대상을 원한다면 &lt;code>this&lt;/code> 를 활용할 수 있다.&lt;/p>
&lt;p>다만, arrow function의 경우 상위 스코프를 지칭하기 때문에 window 객체가 출력된 것이다.&lt;/p>
&lt;h2 id="3-정리">3. 정리&lt;/h2>
&lt;p>Arrow Function을 쓰면 안되는 대표적인 경우는 다음과 같다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>object의 메소드 정의&lt;/p>
&lt;ul>
&lt;li>this가 전역 객체(window)를 나타낸다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>생성자 함수&lt;/p>
&lt;ul>
&lt;li>
&lt;p>생성자 함수는 object를 생성하는 또다른 방법이다.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">MyInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;tak&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">phoneNumber&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;010-1234-5678&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">greeting&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;hi&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">name&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;hi&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">justin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;justin&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Arrow function을 사용하면 에러가 발생한다.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Animal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">name&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">dog&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Animal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;dog&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Uncaught TypeError: Animal is not a constructor
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>addEventListener 함수의 콜백 함수&lt;/p>
&lt;ul>
&lt;li>this가 전역 객체(window)를 나타낸다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item></channel></rss>